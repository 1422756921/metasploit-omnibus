From c833634db378f4c988656d05b944409bbe3707e6 Mon Sep 17 00:00:00 2001
From: Brent Cook <bcook@rapid7.com>
Date: Thu, 5 Mar 2015 08:18:35 -0600
Subject: [PATCH] add omnibus helper scripts

msfdb and msfrunner
---
 msfdb      | 134 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 msfwrapper |  30 ++++++++++++++
 2 files changed, 164 insertions(+)
 create mode 100755 msfdb
 create mode 100755 msfwrapper

diff --git a/msfdb b/msfdb
new file mode 100755
index 0000000..2fe3c53
--- /dev/null
+++ b/msfdb
@@ -0,0 +1,134 @@
+#!/bin/bash
+#set -e
+# set -x
+
+BASE=/opt/metasploit
+BIN=$BASE/embedded/bin
+DB=$BASE/db
+FRAMEWORK=$BASE/framework
+DBCONF=$FRAMEWORK/config/database.yml
+
+pw_gen() {
+  $BIN/openssl rand -base64 32
+}
+
+start_db() {
+  if [ -e $DB ]; then
+    $BIN/pg_ctl -D $DB status > /dev/null
+    if [ $? == 0 ]; then
+      echo "Database already started at $DB"
+    else
+      echo Starting Postgresql
+      $BIN/pg_ctl -D $DB -l $DB/log start > /dev/null
+      sleep 2
+    fi
+  else
+    echo "No database found at $DB, not starting"
+  fi
+}
+
+stop_db() {
+  $BIN/pg_ctl -D $DB status > /dev/null
+  if [ $? == 0 ]; then
+    $BIN/pg_ctl -D $DB stop
+  else
+    echo "Database not running at $DB, doing nothing"
+  fi
+}
+
+init_db() {
+  if [ -e $DB ]; then
+    echo "A database appears to exist at $DB, skipping initialization"
+    return
+  fi
+
+  MSF_USER=msf
+  MSFTEST_USER=msftest
+
+  # Generate new database passwords
+  MSF_PASS=$(pw_gen)
+  MSFTEST_PASS=$(pw_gen)
+  PGSQL_PASS=$(pw_gen)
+
+  # Write a default database config file
+  cat > $DBCONF <<-EOF
+development: &pgsql
+  adapter: postgresql
+  database: msf
+  username: $MSF_USER
+  password: $MSF_PASS
+  host: localhost
+  port: 5432
+  pool: 5
+  timeout: 5
+
+production: &production
+  <<: *pgsql
+
+test:
+  <<: *pgsql
+  database: msftest
+  username: $MSFTEST_USER
+  password: $MSFTEST_PASS
+EOF
+
+  chmod 640 $DBCONF
+
+  echo Creating database at $DB
+	mkdir $DB
+  $BIN/initdb --auth-host=trust --auth-local=trust -E UTF8 $DB > /dev/null
+  echo "host    \"msf\"      \"${MSF_USER}\"      127.0.0.1/32           md5" >> $DB/pg_hba.conf
+  echo "host    \"msftest\"  \"${MSFTEST_USER}\"  127.0.0.1/32           md5" >> $DB/pg_hba.conf
+
+  start_db
+
+  echo "Creating database users"
+  $BIN/psql postgres -c \
+    "create user $MSF_USER with password '$MSF_PASS';" > /dev/null
+  $BIN/psql postgres -c \
+    "create user $MSFTEST_USER with password '$MSFTEST_PASS';" > /dev/null
+  $BIN/psql postgres -c "alter user msftest createdb;" > /dev/null
+  $BIN/createdb -O $MSF_USER msf -h localhost
+
+  echo "Creating initial database schema"
+  (cd $FRAMEWORK; $BIN/bundle exec $BIN/rake db:migrate >/dev/null 2>&1)
+}
+
+delete_db() {
+  if [ -e $DB ]; then
+    echo "Deleting all data at $DB"
+    stop_db
+    rm -fr $DB $DBCONF
+  else
+    echo "No data at $DB, doing nothing"
+  fi
+}
+
+reinit_db() {
+  delete_db
+  init_db
+}
+
+usage() {
+  echo "Manage a metasploit framework database"
+  echo
+  echo "  $0 init      # initialize the database"
+  echo "  $0 reinit    # delete and reinitialize the database"
+  echo "  $0 delete    # delete database and stop using it"
+  echo "  $0 start     # start the database"
+  echo "  $0 stop      # stop the database"
+}
+
+if [ "$#" -ne 1 ]; then
+  usage
+  exit
+fi
+
+case $1 in
+  init) init_db ;;
+  reinit) reinit_db ;;
+  delete) delete_db ;;
+  start) start_db ;;
+  stop) stop_db ;;
+  *) usage ;;
+esac
diff --git a/msfwrapper b/msfwrapper
new file mode 100755
index 0000000..30d6b0b
--- /dev/null
+++ b/msfwrapper
@@ -0,0 +1,30 @@
+#!/bin/sh
+cmd=`basename $0`
+
+if [ $cmd = "msfrunner" ]; then
+  echo "This script wraps metasploit framework commands to run in the correct environment."
+  echo " Do not run it directly."
+  exit 1
+fi
+
+pushd `dirname $0` > /dev/null
+SCRIPTDIR=`pwd -P`
+BIN=$SCRIPTDIR/../embedded/bin
+FRAMEWORK=$SCRIPTDIR/../framework
+DB=$SCRIPTDIR/../db
+DBCONF=$FRAMEWORK/config/database.yml
+popd > /dev/null
+
+start_db() {
+  if [ -e $DB -a -e $DBCONF ]; then
+    $BIN/pg_ctl -D $DB status > /dev/null
+    if [ $? != 0 ]; then
+      echo Starting Postgresql
+      $BIN/pg_ctl -D $DB -l $DB/log start > /dev/null
+      sleep 2
+    fi
+  fi
+}
+
+start_db
+(cd $FRAMEWORK; $BIN/bundle exec $BIN/ruby ./$cmd)
-- 
2.3.1

